{"version":3,"sources":["images/logo6.jpg","components/Navbar.js","components/Home.js","components/Growth.js","components/About.js","components/Services.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","M","window","document","addEventListener","elems","querySelectorAll","Sidenav","init","className","href","src","resize","alt","data-target","id","Component","Home","Parallax","Growth","About","Services","App","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,mC,wQC6C5BC,E,4LAvCP,IAAMC,EAAIC,OAAOD,EACjBE,SAASC,iBAAiB,oBAAoB,WAC1C,IAAIC,EAAQF,SAASG,iBAAiB,YAEtBL,EAAEM,QAAQC,KAAKH,EAAO,S,+BAK1C,OACI,yBAAKI,UAAU,kBACX,yBAAKA,UAAU,gCACX,yBAAKA,UAAU,aACX,uBAAGC,KAAK,IAAGD,UAAU,cACjB,yBAAKE,IAAKC,IAAQC,IAAI,OAAOJ,UAAU,oBAE3C,uBAAGC,KAAK,IAAID,UAAU,kBAAkBK,cAAY,gBAChD,uBAAGL,UAAU,6BAAb,SAEJ,wBAAIA,UAAU,8BACV,4BAAI,uBAAGC,KAAK,KAAR,SACJ,4BAAI,uBAAGA,KAAK,UAAR,aACJ,4BAAI,uBAAGA,KAAK,WAAR,uBACJ,4BAAI,uBAAGA,KAAK,aAAR,eAGZ,wBAAID,UAAU,UAAUM,GAAG,gBACvB,4BAAI,uBAAGL,KAAK,KAAR,SACA,4BAAI,uBAAGA,KAAK,UAAR,aACJ,4BAAI,uBAAGA,KAAK,WAAR,uBACJ,4BAAI,uBAAGA,KAAK,aAAR,oB,GAhCXM,aCuBNC,G,kMAtBP,IAAMhB,EAAIC,OAAOD,EACjBE,SAASC,iBAAiB,oBAAoB,WAC1C,IAAIC,EAAQF,SAASG,iBAAiB,aAEtBL,EAAEiB,SAASV,KAAKH,EAAO,S,+BAI3C,OACI,yBAAKI,UAAU,QACX,yBAAKA,UAAU,sBACf,yBAAKA,UAAU,eAAeM,GAAG,aAC7B,wBAAIN,UAAU,QAAd,gCAEJ,yBAAKA,UAAU,aACX,wBAAIA,UAAU,eAAeM,GAAG,aAAhC,+C,GAjBDC,cCQJG,E,iLAPP,OACI,yBAAKV,UAAU,aACX,6D,GAJKO,aCSNI,E,iLAPP,OACI,yBAAKX,UAAU,aACX,4D,GAJIO,aCSLK,E,iLAPP,OACI,yBAAKZ,UAAU,aACX,+D,GAJOO,a,gBCyBRM,G,uLAfX,OACE,kBAAC,IAAD,KACE,yBAAKb,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOc,OAAK,EAACC,KAAK,IAAIC,UAAaR,IACnC,kBAAC,IAAD,CAAOO,KAAK,QAAQC,UAAaR,IACjC,kBAAC,IAAD,CAAOO,KAAK,SAASC,UAAaL,IAClC,kBAAC,IAAD,CAAOI,KAAK,UAAUC,UAAaN,IACnC,kBAAC,IAAD,CAAOK,KAAK,YAAYC,UAAaJ,U,GAV7BL,cCEEU,QACW,cAA7BxB,OAAOyB,SAASC,UAEe,UAA7B1B,OAAOyB,SAASC,UAEhB1B,OAAOyB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS5B,SAAS6B,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b2084f7e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo6.3d146f7d.jpg\";","import React, { Component } from 'react'\r\nimport '../components/Navbar.css'\r\nimport resize from '../images/logo6.jpg'\r\n\r\nclass Navbar extends Component {\r\n    componentDidMount() {\r\n        const M = window.M;\r\n        document.addEventListener('DOMContentLoaded', function() {\r\n            var elems = document.querySelectorAll('.sidenav');\r\n            // eslint-disable-next-line no-unused-vars\r\n            var instances = M.Sidenav.init(elems, {});\r\n          });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"navbar-wrapper\">\r\n                <nav className=\"nav-wrapper white black-text\">\r\n                    <div className=\"container\">\r\n                        <a href=\"/\"className=\"brand-logo\">\r\n                            <img src={resize} alt=\"logs\" className=\"responsive-img\"/> \r\n                        </a>\r\n                        <a href=\"/\" className=\"sidenav-trigger\" data-target=\"mobile-links\">\r\n                            <i className=\"material-icons icon-black\">menu</i>\r\n                        </a>\r\n                        <ul className=\"right hide-on-med-and-down\">\r\n                            <li><a href=\"/\">Home</a></li>\r\n                            <li><a href=\"/about\">About Us</a></li>\r\n                            <li><a href=\"/growth\">Growth Accelerator</a></li>\r\n                            <li><a href=\"/services\">Services</a></li>\r\n                        </ul>\r\n                    </div>\r\n                    <ul className=\"sidenav\" id=\"mobile-links\">\r\n                        <li><a href=\"/\">Home</a></li>\r\n                            <li><a href=\"/about\">About Us</a></li>\r\n                            <li><a href=\"/growth\">Growth Accelerator</a></li>\r\n                            <li><a href=\"/services\">Services</a></li>\r\n                    </ul>\r\n                </nav>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Navbar","import React, {Component} from 'react'\r\nimport '../components/Home.css'\r\n\r\nclass Home extends Component {\r\n    componentDidMount() {\r\n        const M = window.M;\r\n        document.addEventListener('DOMContentLoaded', function() {\r\n            var elems = document.querySelectorAll('.parallax');\r\n            // eslint-disable-next-line no-unused-vars\r\n            var instances = M.Parallax.init(elems, {});\r\n          });\r\n    }\r\n    render() {\r\n        return(\r\n            <div className=\"home\">\r\n                <div className=\"parallax-container\">\r\n                <div className=\"center-align\" id=\"back-text\">\r\n                    <h1 className=\"head\">Business Growth Accelerator</h1>\r\n                </div>\r\n                <div className=\"container\">\r\n                    <h2 className=\"center-align\" id=\"head-para\">Game-Changing interventions for SMEs</h2>\r\n                </div>\r\n            </div>\r\n            </div>\r\n        )\r\n    } \r\n}\r\nexport default Home","import React, {Component} from 'react'\r\n\r\nclass Growth extends Component {\r\n    render() {\r\n        return(\r\n            <div className=\"container\">\r\n                <h1>This is Growth Component</h1>\r\n            </div>\r\n        )\r\n    } \r\n}\r\nexport default Growth","import React, {Component} from 'react'\r\n\r\nclass About extends Component {\r\n    render() {\r\n        return(\r\n            <div className=\"container\">\r\n                <h1>This is About Component</h1>\r\n            </div>\r\n        )\r\n    } \r\n}\r\nexport default About","import React, {Component} from 'react'\r\n\r\nclass Services extends Component {\r\n    render() {\r\n        return(\r\n            <div className=\"container\">\r\n                <h1>This is Services Component</h1>\r\n            </div>\r\n        )\r\n    } \r\n}\r\nexport default Services","import React, { Component } from 'react';\nimport Navbar from './components/Navbar';\nimport Home from './components/Home';\nimport Growth from './components/Growth';\nimport About from './components/About';\nimport Services from './components/Services'\nimport {Route} from 'react-router-dom'\nimport {HashRouter as Router} from 'react-router-dom'\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <Navbar />\n          <Route exact path='/' component = {Home} />\n          <Route path='/home' component = {Home} />\n          <Route path='/about' component = {About} />\n          <Route path='/growth' component = {Growth} />\n          <Route path='/services' component = {Services} />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}